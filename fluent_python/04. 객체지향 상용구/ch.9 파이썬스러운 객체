{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e0a8232e",
   "metadata": {},
   "source": [
    "# 1. 객체 표현"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64096e8b",
   "metadata": {},
   "source": [
    "- repr() : 객체를 개발자가 보고자 하는 형태로 표현한 문자열로 반환한다.  \n",
    "- str() : 객체를 사용자가 보고자 하는 형태로 표현한 문자열로 반환한다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de26c72f",
   "metadata": {},
   "source": [
    "# 2. 벡터 클래스의 부활"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "a1b03a96",
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "from array import array\n",
    "\n",
    "class Vector2d:\n",
    "    typecode = 'd'\n",
    "\n",
    "    def __init__(self, x, y):\n",
    "        self.__x = float(x)\n",
    "        self.__y = float(y)\n",
    "\n",
    "    @property\n",
    "    def x(self):\n",
    "        return self.__x\n",
    "\n",
    "    @property\n",
    "    def y(self):\n",
    "        return self.__y\n",
    "\n",
    "    def __iter__(self):\n",
    "        return (i for i in (self.x, self.y))\n",
    "\n",
    "    def __repr__(self):\n",
    "        class_name = type(self).__name__\n",
    "        return '{}({!r}, {!r})'.format(class_name, *self)  # <4>\n",
    "\n",
    "    def __str__(self):\n",
    "        return str(tuple(self))  # <5>\n",
    "\n",
    "    def __bytes__(self):\n",
    "        return (bytes([ord(self.typecode)]) +  # <6>\n",
    "                bytes(array(self.typecode, self)))  # <7>\n",
    "        \n",
    "    @classmethod  # Bytes -> Vector2d 클래스\n",
    "    def frombytes(cls, octets):  # <2>\n",
    "        typecode = chr(octets[0])  # <3>\n",
    "        memv = memoryview(octets[1:]).cast(typecode)  # <4>\n",
    "        return cls(*memv)  # <5>\n",
    "\n",
    "    def __eq__(self, other):\n",
    "        return tuple(self) == tuple(other)  # <8>\n",
    "\n",
    "    def __abs__(self):\n",
    "        return math.hypot(self.x, self.y)  # <9>\n",
    "\n",
    "    def __bool__(self):\n",
    "        return bool(abs(self))  # <10>\n",
    "    \n",
    "    \n",
    "#    def __format__(self, format_spec=''):\n",
    "#        components = (format(c, format_spec) for c in self)\n",
    "#        return '({}, {})'.format(*components)\n",
    "    \n",
    "    \n",
    "    #이제 __format__() 메서드가 극좌표를 생성하도록 수정한다.\n",
    "    def __format__(self, fmt_spec=''):\n",
    "        if fmt_spec.endswith('p'):\n",
    "            fmt_spec = fmt_spec[:-1]\n",
    "            coords = (abs(self), self.angle())\n",
    "            outer_fmt = '<{}, {}>'\n",
    "        else:\n",
    "            coords = self\n",
    "            outer_fmt = '({}, {})'\n",
    "        components = (format(c, fmt_spec) for c in coords)\n",
    "        return outer_fmt.format(*components)\n",
    "    \n",
    "    \n",
    "    \n",
    "    def angle(self):\n",
    "        return math.atan2(self.y, self.x)  \n",
    "    \n",
    "\n",
    "    def __hash__(self):\n",
    "        return hash(self.x) ^ hash(self.y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e6a34daf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3.0 4.0\n"
     ]
    }
   ],
   "source": [
    "v1 = Vector2d(3, 4)\n",
    "print(v1.x, v1.y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "87dc92ce",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.0, 4.0)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y = v1\n",
    "x, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "62ee6e4a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(3.0, 4.0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "2cdab18d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(3.0, 4.0)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1_clone = eval(repr(v1))\n",
    "v1_clone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ef881259",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1 == v1_clone"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "f0902b48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3.0, 4.0)\n"
     ]
    }
   ],
   "source": [
    "print(v1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "8386e21d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'd\\x00\\x00\\x00\\x00\\x00\\x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@'"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "octets = bytes(v1)\n",
    "octets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "7d966597",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abs(v1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "54eec416",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(True, False)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bool(v1), bool(Vector2d(0, 0))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2824f7f2",
   "metadata": {},
   "source": [
    "기본적인 메서드를 거의 구현했지만, bytes() 로 생성한 이진 표현에서 Vector2d 객체를 다시 만드는 메서드가 없다. 이를 구현해본다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d3ee1c9",
   "metadata": {},
   "source": [
    "# 3 대안 생성자"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "233f69c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(3.0, 4.0)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Vector2d.frombytes(b'd\\x00\\x00\\x00\\x00\\x00\\x00\\x08@\\x00\\x00\\x00\\x00\\x00\\x00\\x10@')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98adf9e0",
   "metadata": {},
   "source": [
    "# 4 @classmethod와 @staticmethod"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2ed0c24",
   "metadata": {},
   "source": [
    "@classmethod 데커레이터는 객체가 아닌 클래스에 연산을 수행하는 메서드를 정의한다. @staticmethod 는 본질적으로 모듈 대신 클래스 본체 안에 정의된 평범한 함수이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "7f1768e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Demo:\n",
    "    \n",
    "    @classmethod\n",
    "    def klassmethod(*args):\n",
    "        return args\n",
    "    \n",
    "    @staticmethod\n",
    "    def statmeth(*args):\n",
    "        return args"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "dc49c387",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(<class '__main__.Demo'>,)\n"
     ]
    }
   ],
   "source": [
    "print(Demo.klassmethod())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ef374c38",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(<class '__main__.Demo'>, 'spam')\n"
     ]
    }
   ],
   "source": [
    "print(Demo.klassmethod('spam'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "b3842e26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "()\n"
     ]
    }
   ],
   "source": [
    "print(Demo.statmeth())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a174eaac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('spam',)\n"
     ]
    }
   ],
   "source": [
    "print(Demo.statmeth('spam'))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ea0de03",
   "metadata": {},
   "source": [
    "- Demo.klassmethod() 는 호출 방법과는 무관하게 Demo 클래스를 첫 번째 인수로 받는다.\n",
    "\n",
    "- Demo.statmeth() 는 평범한 함수처럼 동작한다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00ac17c4",
   "metadata": {},
   "source": [
    "# 5 포맷된 출력"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6dfe5d84",
   "metadata": {},
   "source": [
    "format() 내장 함수와 str.format() 메서드는 실제 포맷 작업을 __format__(format_spec) 메서드에 위임한다. format_spec 은 포멧 명시자(format specifier) 로서, 다음 두 가지 방법 중 하나를 통해 지정한다.\n",
    "\n",
    " - format(my_obj, format_spec) 의 두 번째 인수\n",
    "\n",
    " - str.format() 에 사용된 포맷 문자열 안에 {} 로 구분한 대체 필드 안에서 콜론 뒤의 문자열\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "5b4b113b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.4115226337448559\n",
      "0.4115\n",
      "1 BRL = 0.41 USD\n"
     ]
    }
   ],
   "source": [
    "brl = 1/2.43 # 브라질 레알을 미국 달러로 바꾸는 환율\n",
    "print(brl)\n",
    "\n",
    "print(format(brl, '0.4f'))\n",
    "\n",
    "print('1 BRL = {rate:0.2f} USD'.format(rate=brl))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d12ab870",
   "metadata": {},
   "source": [
    "포맷 명시자에 사용된 표기법을 포맷 명시 간이 언어(Format Specification Mini-Language) 라고 한다.\n",
    "\n",
    "몇몇 내장 자료형은 포맷 명시 간이 언어에 고유한 표현 코드를 가지고 있다.\n",
    "\n",
    "예를 들어 int 형의 경우 이진수를 나타내는 'b', 16진수를 나타내는 'x', 코드를 지원하며, float 형의 경우 고정 소수점을 나타내는 '.f', 백분율을 나타내는 '%' 코드를 지원한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "01de9c69",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'101010'"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(42, 'b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1ed60872",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'66.7%'"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(2/3, '.1%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "ecca3193",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 각 클래스가 format_spec 인수를 자신이 원하는 대로 해석해서 포맷 명시 간이 언어를 확장할 수 있다. \n",
    "# 예를 들어 datetime 모듈의 클래스들은 자신의 ___format___() 메서드에서 strftime() 함수와 동일한 포맷 코드를 사용한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7145f735",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20:37:01\n"
     ]
    }
   ],
   "source": [
    "from datetime import datetime\n",
    "now = datetime.now()\n",
    "print(format(now, \"%H:%M:%S\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "1d4f364f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It's now 08:37 PM\n"
     ]
    }
   ],
   "source": [
    "print(\"It's now {:%I:%M %p}\".format(now))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "41082ce9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(3.0, 4.0)\n"
     ]
    }
   ],
   "source": [
    "#클래스에서 __format__() 메서드를 정의하지 않으면, object 에서 상속받은 메서드가 \n",
    "#str(my_object) 를 반환한다. Vector2d는 __str__() 을 정의하고 있으므로, 다음과 같이 실행된다.\n",
    "\n",
    "v1 = Vector2d(3, 4)\n",
    "print(format(v1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "cb412636",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unsupported format string passed to Vector2d.__format__",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[74], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#그러나 이 때 포맷 명시자를 사용하면 object.__format__() 은 TypeError를 발생시킨다.\u001b[39;00m\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28;43mformat\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mv1\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43m.3f\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m)\u001b[49m)\n",
      "\u001b[1;31mTypeError\u001b[0m: unsupported format string passed to Vector2d.__format__"
     ]
    }
   ],
   "source": [
    "#그러나 이 때 포맷 명시자를 사용하면 object.__format__() 은 TypeError를 발생시킨다.\n",
    "\n",
    "print(format(v1, '.3f'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "5a092ce3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#위와 같이 출력하기 위해 __format__() 메서드를 구현한다.\n",
    "'''\n",
    "class Vector2d:\n",
    "    def __format__(self, format_spec=''):\n",
    "        components = (format(c, format_spec) for c in self)\n",
    "        return '({}, {})'.format(*components)\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "e22ce523",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'(3.0, 4.0)'"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1 = Vector2d(3, 4)\n",
    "format(v1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e072a5c5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'(3.00, 4.00)'"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(v1, '.2f')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "399e8bc0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'(3.000e+00, 4.000e+00)'"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(v1, '.3e')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "219c81c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Vector2d 의 간이 언어에 포맷 코드를 추가해본다. 포맷 명시자가 'p' 로 끝나면 벡터를 극좌표 \n",
    "#<r, 𝜽> 로 표현한다. 극좌표를 생성하기 위한 angle 메서드를 다음과 같이 구현할 수 있다.\n",
    "\n",
    " \n",
    "'''\n",
    "def angle(self):\n",
    "    return math.atan2(self.y, self.x)    \n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "39d71448",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(3.0, 4.0)"
      ]
     },
     "execution_count": 89,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#이제 __format__() 메서드가 극좌표를 생성하도록 수정한다.\n",
    "\n",
    "'''\n",
    "    def __format__(self, fmt_spec=''):\n",
    "        if fmt_spec.endswith('p'):\n",
    "            fmt_spec = fmt_spec[:-1]\n",
    "            coords = (abs(self), self.angle())\n",
    "            outer_fmt = '<{}, {}>'\n",
    "        else:\n",
    "            coords = self\n",
    "            outer_fmt = '({}, {})'\n",
    "        components = (format(c, fmt_spec) for c in coords)\n",
    "        return outer_fmt.format(*components)\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "0264d916",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<1.4142135623730951, 0.7853981633974483>'"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(Vector2d(1,1), 'p')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "0625de74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<1.414214e+00, 7.853982e-01>'"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(Vector2d(1,1), '3ep')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "489cc979",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'<1.41421, 0.78540>'"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(Vector2d(1,1), '0.5fp')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "715c489f",
   "metadata": {},
   "source": [
    "# 6. 해시 가능한 Vector2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "4488901f",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unhashable type: 'Vector2d'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[107], line 3\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[38;5;66;03m#지금까지 정의한 Vector2d 는 해시할 수 없다. 그러므로 집합 안의 항목으로 사용할 수 없다.\u001b[39;00m\n\u001b[0;32m      2\u001b[0m v1 \u001b[38;5;241m=\u001b[39m Vector2d(\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m)\n\u001b[1;32m----> 3\u001b[0m \u001b[38;5;28;43mhash\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mv1\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: unhashable type: 'Vector2d'"
     ]
    }
   ],
   "source": [
    "#지금까지 정의한 Vector2d 는 해시할 수 없다. 그러므로 집합 안의 항목으로 사용할 수 없다.\n",
    "v1 = Vector2d(3, 4)\n",
    "hash(v1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "c2205a13",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "unhashable type: 'Vector2d'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[109], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;43mset\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m[\u001b[49m\u001b[43mv1\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: unhashable type: 'Vector2d'"
     ]
    }
   ],
   "source": [
    "set([v1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "b6260b3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(7, 4.0)"
      ]
     },
     "execution_count": 114,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Vector2d 를 해시 가능하게 만들려면 __hash__() 메서드를 구현해야 한다. (__eq__() 메서드도 필요하지만 이미 구현되어 있다.)\n",
    "\n",
    "# 현재 구현된 Vector2d로는 v1.x = 7 과 같이 속성을 변경하는 것이 가능하다. 하지만 불변형으로 만들면 다음과 같이 실행된다.\n",
    "v1.x = 7\n",
    "v1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22bbd65a",
   "metadata": {},
   "source": [
    "불변형으로 구현하기 위해 우선 x 와 y 요소를 읽기 전용 속성으로 만든다. 해시 가능형을 구현하기 위해 반드시 프로퍼티를 구현하거나 속성을 보호할 필요는 없다. 다만, 객체의 해시값이 변하면 안 되므로 읽기 전용 프로퍼티를 사용하는 것이 좋다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "d6d5bb56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n@property\\ndef x(self):\\n    return self.__x\\n\\n@property\\ndef y(self):\\n    return self.__y\\n'"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "@property\n",
    "def x(self):\n",
    "    return self.__x\n",
    "\n",
    "@property\n",
    "def y(self):\n",
    "    return self.__y\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "36bf27fe",
   "metadata": {},
   "source": [
    "- 언더바 두 개로 시작해서 속성을 비공개로 만든다. (완벽하지 않고, 일반적으로 언더바 하나로 암시적인 비공개 속성임을 나타낸다.)\n",
    "\n",
    "- @property 데커레이터는 getter 메서드를 나타낸다.\n",
    "\n",
    " \n",
    "\n",
    "Vector2d 를 불변형으로 만들었으므로, __hash__() 메서드를 구현하면 된다. __hash__() 메서드는 int 를 반환해야 한다. 그리고 동일하다고 판단되는 객체는 동일한 해시값을 가져야 하므로 __eq__() 메서드가 사용하는 객체의 속성을 이용해서 해시를 계산하는 것이 가장 이상적이다. __hash__() 매직 메서드 문서에서는 요소의 해시에 비트단위 XOR(배타적 논리합) 연산자(^) 를 사용하는 것을 권장하므로, 거기에 따른다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "0760830a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Vector2d(3.0, 4.0)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v = Vector2d(3,4)\n",
    "v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "62976018",
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "can't set attribute 'x'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[148], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m v\u001b[38;5;241m.\u001b[39mx \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n",
      "\u001b[1;31mAttributeError\u001b[0m: can't set attribute 'x'"
     ]
    }
   ],
   "source": [
    "v.x = 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "a8d48513",
   "metadata": {},
   "outputs": [],
   "source": [
    "#이제 해시 가능하다.\n",
    "\n",
    "#def __hash__(self):\n",
    "#    return hash(self.x) ^ hash(self.y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "f195c9a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7 384307168202284039\n",
      "{Vector2d(3.1, 4.2), Vector2d(3.0, 4.0)}\n"
     ]
    }
   ],
   "source": [
    "v1 = Vector2d(3, 4)\n",
    "v2 = Vector2d(3.1, 4.2)\n",
    "\n",
    "\n",
    "print(hash(v1), hash(v2))\n",
    "print(set([v1, v2]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef77f1c0",
   "metadata": {},
   "source": [
    "# 7. 파이썬에서 비공개 속성과 보호된 속성"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "731c50ea",
   "metadata": {},
   "source": [
    "파이썬에는 private 수정자가 있는 자바와 달리 비공개 변수를 생성할 수 있는 방법은 없지만, 서브클래스에서 '비공개' 성격의 속성을 실수로 변경하지 못하게 하는 간단한 메커니즘은 있다.\n",
    "\n",
    "속성명을 두 개의 언더바로 시작하고 언더바 없이 또는 하나의 언더바로 끝나도록 정의하면, 파이썬은 언더바와 클래스명을 변수명 앞에 붙여 객체의 __dict__ 에 저장한다.\n",
    "\n",
    "Dog 클래스의 __mood 속성이 있다고 했을 때, __mood 는 _Dog__mood 가 된다. 이러한 파이썬 언어 기능을 이름 장식(name mangling) 이라고 한다.\n",
    "\n",
    " \n",
    "\n",
    "이름 장식은 안전을 제공하지만, 보안 기능은 아니다. 실수로 접근하는 것을 막도록 설계되어 있지만 고의적인 악용을 막지는 못한다.\n",
    "\n",
    " \n",
    "\n",
    "self._x 처럼 언더바 하나를 붙여 속성을 보호할 수도 있다. 다만 실질적으로 어떠한 기능을 하는 것은 아니다.\n",
    "\n",
    "모듈에서 최상위 이름 앞에 _ 를 하나 붙이는 경우에는 from mymod import * 로 작성했을 때, _ 로 시작하는 이름들은 임포트 하지 않는다. 그러나 직접 지정하면 임포트 가능하다.\n",
    "\n",
    "self._x 형태의 속성을 보호하는 관례는 대부분의 개발자가 보편적으로 따르고 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "8f8bfe84",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'_Vector2d__x': 3.0, '_Vector2d__y': 4.0}"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1 = Vector2d(3, 4)\n",
    "v1.__dict__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "894c7dfd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v1._Vector2d__x"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0a626344",
   "metadata": {},
   "source": [
    "# 8 _ _ slots_ _ 클래스 속성으로 공간 절약하기"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1482376",
   "metadata": {},
   "source": [
    "기본적으로 파이썬은 객체 속성을 각 객체 안의 __dict __ 라는 딕셔너리 속성에 저장한다. 딕셔너리는 빠른 접근 속도를 제공하는 대신 메모리 사용량 부담이 크다. 만약 속성이 몇 개 없는 수백만 개의 객체를 다룬다면, __slots __ 클래스 속성을 이용해서 메모리 사용량을 엄청나게 줄일 수 있다. __slots __ 속성은 파이썬 인터프리터가 객체 속성을 딕셔너리 대신 튜플에 저장하게 만든다.\n",
    "\n",
    " \n",
    "\n",
    "참고) 슈퍼클래스에서 상속받은 __slots __ 속성은 서브클래스에 영향을 주지 않는다. 파이썬은 각 클래스에서 개별적으로 정의된 __slots __ 속성만 고려한다.\n",
    "\n",
    " \n",
    "\n",
    "__slots __ 를 정의하려면, __slots __ 라는 이름의 클래스 속성을 생성하고 여기에 객체 속성 식별자들을 담은 문자열의 반복형을 할당한다. 불변형인 튜플을 사용하면 __slots __ 정의를 변경할 수 없음을 알려주므로, 튜플을 주로 사용한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a61af44b",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Vector2d:\n",
    "    __slots__ = ('__x', '__y')\n",
    "\n",
    "    typecode = 'd'\n",
    "    \n",
    "    ..."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edaf2210",
   "metadata": {},
   "source": [
    "__slots __ 를 클래스에 정의함으로써 \"이 속성들이 이 클래스 객체가 가지는 속성\" 임을 인터프리터에 알려준다. 그러면 파이썬 인터프리터는 이 속성들을 각 객체의 튜플형 구조체에 저장함으로써 __dict __ 속성을 각 객체마다 유지하는 부담을 덜어낸다.\n",
    "\n",
    " \n",
    "\n",
    "참고) 실제 수백만 개의 숫자 데이터를 처리하는 경우에는 NumPy 를 사용하는 것이 훨씬 좋다. NumPy 는 메모리를 효율적으로 사용할 뿐만 아니라, 숫자 처리에 상당히 최적화된 함수들을 가지고 있기 때문이다.\n",
    "\n",
    " \n",
    "\n",
    "클래스 안에 __slots __ 를 명시하는 경우, 명시되지 않은 다른 속성은 가질 수 없다. 이는 __slots __ 의 존재 이유가 아니다. 최적화를 위함이지 새로운 속성을 추가하지 못하게 하기 위함이 아니다. \n",
    "\n",
    "__slots __ 는 고정된 스키마의 아주 큰 데이터베이스와 같은 테이블 형태의 데이터를 사용할 때 유용하다. 그러나 이런 형태의 데이터를 자주 처리해야 한다면 NumPy 나 Pandas 를 사용하는 것이 더 좋다.\n",
    "\n",
    " \n",
    "\n",
    "__slots __ 는 적절히 사용하면 메모리 사용량을 크게 줄일 수 있지만, 다음과 같이 주의할 점이 있다.\n",
    "\n",
    "인터프리터는 상속된 __slots __ 속성을 무시하므로 각 클래스마다 다시 정의해야 한다.\n",
    "__dict __ 를 __slots __ 에 추가하지 않는 한 객체는 __slots __ 에 나열된 속성만 가질 수 있다.\n",
    "그러나 __dict __ 를 __slots __ 에 추가하면 메모리 절감 효과가 반감될 수 있다.\n",
    "__weakref __ 를 __slots __ 에 추가하지 않으면 객체가 약한 참조의 대상이 될 수 없다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "785007fb",
   "metadata": {},
   "source": [
    "# 9 클래스 속성 오버라이드"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c7b676c",
   "metadata": {},
   "source": [
    "클래스 속성을 객체 속성의 기본값으로 사용하는 것은 파이썬의 독특한 특징이다. Vector2d 클래스는 typecode 라는 클래스 속성이 있다. Vector2d 객체가 생성될 때, 그들 자신의 typecode 속성을 가지고 생성된 것은 아니므로, self.typecode 는 기본적으로 Vector2d.typecode 클래스 속성을 가져온다.\n",
    "\n",
    " \n",
    "\n",
    "존재하지 않는 객체 속성에 값을 저장하면, 새로운 객체 속성을 생성하고 동일한 이름의 클래스 속성은 변경하지 않는다. 그 후부터는 객체가 self.typecode 를 읽을 때 객체 자체의 typecode 를 가져오므로, 동일한 이름의 클래스 속성을 가리게 된다. 즉, 각 객체가 서로 다른 typecode 를 커스터마이징할 수 있게 된다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "3ae27145",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'd\\x9a\\x99\\x99\\x99\\x99\\x99\\xf1?\\x9a\\x99\\x99\\x99\\x99\\x99\\x01@'\n"
     ]
    }
   ],
   "source": [
    "v1 = Vector2d(1.1, 2.2)\n",
    "dumpd = bytes(v1)\n",
    "print(dumpd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "557b6ef0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n"
     ]
    }
   ],
   "source": [
    "print(len(dumpd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "a71b024f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'f\\xcd\\xcc\\x8c?\\xcd\\xcc\\x0c@'\n"
     ]
    }
   ],
   "source": [
    "v1.typecode = 'f'\n",
    "dumpf = bytes(v1)\n",
    "print(dumpf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "6945bda6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(len(dumpf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "f38faff6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d\n"
     ]
    }
   ],
   "source": [
    "print(Vector2d.typecode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "86fb5e0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b'f\\x8c.\\xba=&\\xb4\\x17='\n"
     ]
    }
   ],
   "source": [
    "class ShortVector2d(Vector2d):\n",
    "    typecode = 'f'\n",
    "\n",
    "sv = ShortVector2d(1/11, 1/27)\n",
    "print(bytes(sv))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "a98a30fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "print(len(bytes(sv)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3d8e2ea",
   "metadata": {},
   "source": [
    "# 10 요약"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38c9b58d",
   "metadata": {},
   "source": [
    "\n",
    "Simple is better than complex\n",
    "\n",
    "파이썬스러운 객체는 요구사항을 만족하는 한 가장 단순해야 하며, 언어 기능을 모두 갖출 필요는 없다.\n",
    "\n",
    "Vector2d 클래스를 개선하면서 여러 매직 메서드를 구현하였다.\n",
    "\n",
    "- 문자열/바이트로 표현하는 모든 메서드 : __repr __(), __str __(), __format __(), __bytes __()\n",
    "- 객체를 숫자로 변환하는 여러 메서드 : __abs __(), __bool __(), __hash __()\n",
    "- bytes 로 변환하고 해시할 수 있게 해주는 메서드 : __eq __(), __hash __()\n",
    "\n",
    "\\포맷 명시 간이 언어는 __format __() 메서드를 구현해서 확장할 수 있다. __format __() 메서드는 format(obj, format_spec) 내장 함수의 format_spec 이나 str.format() 메서드에 사용되는 문자열 안에 있는 '{:<format_spec>}' 치환 필드를 파싱한다.\n",
    "\n",
    " \n",
    "\n",
    "Vector2d를 해시 가능하게 만들기 위해 준비하면서, x와 y 속성을 비공개로 구현하고 읽기 전용 프로퍼티로 공개함으로써 실수로 값을 변경하지 못하도록 불변형으로 만들었다. 그러고 나서 객체 속성들의 해시를 XOR 하는 권장 기법을 이용해서 __hash __() 메서드를 구현했다.\n",
    "\n",
    " \n",
    "\n",
    "또한 메모리 절약과 Vector2d 에서 __slots __ 속성을 선언할 때 주의해야 할 점을 확인했다. __slots __ 는 사용하기 까다로우므로 아주 많은 (수백만 개 이상) 객체를 다룰 때만 사용할 가치가 있다.\n",
    "\n",
    " \n",
    "\n",
    "마지막으로 self.typecode 객체 속성을 이용하여 클래스 속성을 오버라이드 하였는데, 객체 속성을 통해 오버라이드하는 방법과 클래스 상속을 통해 서브클래스 수준에서 덮어쓰는 방법을 구현했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "67c0e06f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
